# :base_url = https://k8s.amaris.ovh:30446
# :base_url = http://k8s.amaris.ovh:30080/mon-compte-connector/clj
:base_url = http://localhost:8080
:user_mail = user11@domain1.com
:user_pass = Password11
# :user_basic = dXNlcjExQGRvbWFpbjEuY29tOlBhc3N3b3JkMTE=
:user_basic = bWFpbEBkb21haW4zLmNvbTpBbWFyaXMtMw==
:device-uid = yrn8932n7m0rx49t048x80t35300
:token = eyJhbGciOiJIUzI1NiJ9.eyJtYWlsIjoidXNlcjExQGRvbWFpbjEuY29tIiwidWlkIjoidXMxMSIsImV4cCI6MTUzODAwMTA4Mn0.sWI0hL7tiRk3m_n14UEm6bT0c1R_Wlp4sIGvcge9PtM
:base_headers = <<
Content-Type: application/json
X-MyAccountApp-Build-ID: #appVersionSnapshot
X-MyAccountApp-Device-ID: :device-uid
#

# API version

GET :base_url/
:base_headers

# API description

GET :base_url/v1
:base_headers

# Create auth token

POST :base_url/v1/auth/token
:base_headers
Authorization: Basic :user_basic

# Create auth token - mail invalid

POST :base_url/v1/auth/token
:base_headers
Authorization: Basic dXNlcjGRvbWFpbjEuY29tOlBhc3N3b3JkMTE=

# Create auth token - not found

POST :base_url/v1/auth/token
:base_headers
Authorization: Basic dXNlckBkb21haW4xLmNvbTpQYXNzd29yZDEx

# Create auth token - invalid credentials

POST :base_url/v1/auth/token
:base_headers
Authorization: Basic dXNlcjExQGRvbWFpbjEuY29tOlBhc3JkMTE=

# Get user info

GET :base_url/v1/me
:base_headers
Authorization: Bearer :token

# Get user info - invalid auth header

GET :base_url/v1/me
:base_headers
Authorization: toto

# Get user info - invalid token

GET :base_url/v1/me
:base_headers
Authorization: Bearer nciwpinuicpuivhfyuvh

# update user info

PUT :base_url/v1/me
:base_headers
Authorization: Bearer :token

{
  "phone": "+33123456789"
}

# update user info - binary

PUT :base_url/v1/me
:base_headers
Authorization: Bearer :token

{
  "phone": "+33112233445",
  "photo": "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"
}

# update user info - unknown data

PUT :base_url/v1/me
:base_headers
Authorization: Bearer :token

{
  "phone": "+33123456789",
  "password": "hello",
  "mail": "toto@titi.fr",
  "tata": "bim"
}

# Change user password

PUT :base_url/v1/me/password
:base_headers
Authorization: Bearer :token

{
  "oldPassword": "Password11",
  "newPassword": "NewPassword11"
}

# Change user password - invalid auth header

PUT :base_url/v1/me/password
:base_headers
Authorization: toto

{
  "oldPassword": "Password11",
  "newPassword": "NewPassword11"
}

# Change user password - invalid token

PUT :base_url/v1/me/password
:base_headers
Authorization: Bearer nciwpinuicpuivhfyuvh

{
  "oldPassword": "Password11",
  "newPassword": "NewPassword11"
}

# Change user password - missing password

PUT :base_url/v1/me/password
:base_headers
Authorization: Bearer :token

{}

# Change user password - invalid old password

PUT :base_url/v1/me/password
:base_headers
Authorization: Bearer :token

{
  "oldPassword": "toto",
  "newPassword": "NewPassword11"
}

# Change user password - invalid new password

PUT :base_url/v1/me/password
:base_headers
Authorization: Bearer :token

{
  "oldPassword": "NewPassword11",
  "newPassword": "Password11"
}

# Get Reset code

POST :base_url/v1/reset/code
:base_headers

{
  "mail": "user22@domain2.com"
}

# Get Reset code - not found

POST :base_url/v1/reset/code
:base_headers

{
  "mail": "undefined@domain2.com"
}

# Get OTT

POST :base_url/v1/reset/token
:base_headers

{
  "mail": "user22@domain2.com",
  "code": 756548
}

# Reset password

POST :base_url/v1/reset/password
:base_headers

{
  "mail": "user22@domain2.com",
  "OTT": "eyJhbGciOiJIUzI1NiJ9.eyJtYWlsIjoidXNlcjIyQGRvbWFpbjIuY29tIiwiZXhwIjoxNTM4MDAwNjUzfQ.qEl-R06-X0OrfDdgq2eIT8sDCQCxY5lZnMZlyRoB-vs",
  "newPassword": "hello"
}
